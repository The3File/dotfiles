#!/usr/bin/env bash

   #   _   _          ____                   __ _	  #
   #  | | | |        |___ \                 / _(_)	  #
   #  | |_| |__   ___  __) | ___ ___  _ __ | |_ _  __ _	  #
   #  | __| '_ \ / _ \|__ < / __/ _ \| '_ \|  _| |/ _` |  #
   #  | |_| | | |  __/___) | (_| (_) | | | | | | | (_| |  #
   #   \__|_| |_|\___|____/ \___\___/|_| |_|_| |_|\__, |  #
   #                                               __/ |  #
   #                                              |___/	  #


config() {

   printf '\e[33m%s...' "applying configs"

   ## BSPWM
      bspc config focused_border_color "$color4"
      bspc config border_width         2
      bspc config split_ratio          0.5
      bspc config automatic_scheme spiral
      bspc config gapless_monocle true

      bspc monitor -d 1 2 3 4 5 6 7 8 9 10

   ## AUTOGAP
   # gaps
      GS="10"	# gaps size integer
      GN="4"	# number of windows before zero gaps

   # left and right padding
      PS="7"	# padding size integer
      PN="2"	# number of windows before zero padding

   ## MISC.
      xmodmap -e "keycode 135 = Super_R"

   printf '\e[34m%s\n\n' "done."

}


apps() {

   for a in autogap dunstbar dunst acpid_events; do

      case $a in
	 dunstbar) 	o=(--boot) ;;
	 *) 		o=()
      esac

      if [[ $(ps ax | sed -n "/sed/d;/\<$a\>/p") ]]; then
	 ukill "$a" 1>/dev/null && {
	    "$a" "${o[@]}" &>/dev/null & disown
	    printf '\e[33m%s: %s\n' "$a" "restarted"
	 } || printf '\e[31m%s: %s %s\n' "$a" "ukill" "failed"
      else
	 "$a" "${o[@]}" &>/dev/null & disown &&
	 printf '\e[37m%s: %s\n' "$a" "started" ||
	 printf '\e[31m%s: %s %s\n' "$a" "failed"
      fi

   done

}


rules() {

   printf '\e[33m%s...' "setting rules"
   bspc rule -r Zathura
   bspc rule -a Zathura state=tiled

   bspc rule -r float
   bspc rule -a float sticky=off state=floating 

   bspc rule -r gass
   bspc rule -a gass sticky=on state=floating focus=off border=on

   bspc rule -r files
   bspc rule -a files locked=on sticky=on state=floating hidden=on

   bspc rule -r scratchterm
   bspc rule -a scratchterm locked=on sticky=on state=floating hidden=on

   bspc rule -r scratchmath
   bspc rule -a scratchmath locked=on sticky=on state=floating hidden=on

   bspc rule -r "VirtualBox Machine"
   bspc rule -a "VirtualBox Machine" desktop=8
   bspc rule -r "virtualbox"
   bspc rule -a "virtualbox" desktop=8
   printf '\e[34m%s\n\n' "done."

}


qute() {

   printf '\e[33m\n%s...' "linking files"
   ln -sf "$HOME/.cache/wal/dunstrc" "$HOME/.config/dunst/dunstrc" &
   ln -sf "$HOME/.cache/wal/zathurarc" "$HOME/.config/zathura/zathurarc" &
   printf '\e[34m%s\n' "done."

   printf '\e[33m%s...' "creating style"
   qute="$HOME/.config/qutebrowser"
   sassc "$qute/style.scss" > "$qute/style.css"
   printf '\e[34m%s\n' "done."

   printf '\e[33m%s...' "applying colors"
   sed 's/{color4}/'$color4'/p;s/{color2}/'$color2'/g;s/{color0}/'$color0'/g'\
      $HOME/.config/wal/qute >\
      $HOME/.config/qutebrowser/config.py
   printf '\e[34m%s\n' "done."

   printf '\e[33m%s...' "reloading qutebrowser"
   [[ ! -z $(pgrep -x qutebrowser) ]] && qutebrowser :config-source &>/dev/null
   printf '\e[34m%s %s\n\n' "done."

}


main() {
   source "$HOME/.cache/wal/colors.sh"

   # -- BSP SUBSCRIBE -- #
   for fifo in $GAPFIFO $BARFIFO; do
      [[ -e "$fifo" ]] && rm "$fifo"; mkfifo "$fifo"
      bspc subscribe node_add node_remove desktop_focus > $fifo &
   done
   # ------------------- #

   [[ $@ ]] &&
   case "$@" in
      rules) rules ;;
      config) config ;;
      qute) qute ;;
      apps) apps ;;
   esac && exit

   rules; config; qute; apps

}

main "$@" && printf '\e[m\n%s\n' "..all done"
