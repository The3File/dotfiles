#!/usr/bin/env bash
#
# prokrastimer - an over-engineered terminal pomodoro timer

main() {
	printf "\e[2J\e[H\e[s"
	trap 'tput cvvis && completed && exit' EXIT
	trap 'clean' SIGWINCH
	clean && prompt && stty -echo && tput civis && start_work
}

clean() { 
	printf "\e[8;0\e[1J\e[H"
	figlet -f big prokrastimer | awk '{ printf "\033[3%dm%s\034\n", 6, $0;}' 
	printf "\e[u"
}
	
bar() {
	printf -v prog "%$(($2))s"
	printf -v total "%$(($1-$2))s"
	printf '\e[J\e['$3';0H%s\r' "[${prog// /\#}${total}]"
}

prompt() {
	printf "\e[10;0H\e[1;37mLenght of work in minuttes (25): \e[1;35m\e[s"; read work
	printf "\e[1;37mLength of breaks in min. (5): \e[1;33m\e[s"; read notwork
	printf "\e[1;37mNumber of sessions (2): \e[s"; read antal
	printf "\e[1;37mTimer started! (Stop with Ctrl+c)"
	[[ -z "$work" ]] && work=25
	[[ -z "$notwork" ]] && notwork=5
	[[ -z "$antal" ]] && antal=2
	count="0"
}

start_work() {
	sec="2" start_time="$SECONDS" elaps="0"
	while [ $sec -gt 1 ]; do
		((sec=(work*60-(SECONDS-start_time)),elaps+=1))
		((size=$(tput cols)-2,rows=$(tput lines),total=(elaps*size/work/60)))
		printf "\e[10;0H\e[1;35mWork left: %02d:%02d" "$((sec/60))" "$((sec%60))"
		bar "$size" "$total" "$rows"; sleep 1
	done && work_done
}

start_notwork() {
	sec="2" start_time="$SECONDS" elaps="0"
	while [ $sec -gt 1 ]; do
		((sec=(notwork*60-(SECONDS-start_time)),elaps+=1))
		((size=$(tput cols)-2,rows=$(tput lines),total=elaps*size/notwork/60))
		printf "\e[10;0H\e[1;33mBreak left: %02d:%02d" "$((sec/60))" "$((sec%60))"
		bar "$size" "$total" "$rows"; sleep 1
	done && notwork_done
}

work_done() {
	((count+=1))
	printf "\e[10;17H\e[1;39m - Work completed!"
	play ~/.Scripts/.prokrastimer/gong.wav 2>/dev/null &
	[[ $count == $antal ]] && exit 0
		printf "\n\e[1;33mPress ENTER to start break" && read 2>/dev/null
		printf "\e[1A\r\e[J" && start_notwork
}

notwork_done() {
	printf "\e[10;18H\e[1;39m - Break completed!"
	play ~/.Scripts/.prokrastimer/gong.wav 2>/dev/null &
	printf "\n\e[1;35mPress ENTER to start work" && read 2>/dev/null
	printf "\e[1A\r\e[J" && start_work
}

completed() {
	[[ $((count*work/60)) > 0 ]] && hour="%2d hours and" || hour=""
	printf "\e[10;0H\e[J\e[1;33mCompleted work total:$hour%2d min. \n\e[1;31mPress ENTER to exit."\
		"$((count*work/60))" "$(((count*work)%60))"
	read &>/dev/null && clear
}

main
