#!/usr/bin/env bash
# Prokrastimer
# Over-engineered cli pomodoro timer

prompt() {
	printf "\e[10;0H\e[1;37mLenght of work in minuttes (25): \e[1;35m\e[s"; read work
	printf "\e[1;37mLength of breaks in min. (5): \e[1;33m\e[s"; read notwork
	printf "\e[1;37mNumber of sessions (2): \e[s"; read sess

	[[ -z "$work" ]] && work=25
	[[ -z "$notwork" ]] && notwork=5
	[[ -z "$sess" ]] && sess=2

	((work*=60))
	((notwork*=60))
	((sess*=60))
}
bar() {
	((width=$(tput cols)-2,rows=$(tput lines)))

	printf -v prog "%$(($1*width/$2))s"
	printf -v total "%$((width-($1*width/$2)))s"

	printf '\e[J\e['$rows';0H%s\r' "[${prog// /\#}${total}]"

	sleep .1
}
start_work() {
	((sec=1,start_time=$SECONDS))

	while [[ $sec > 0 ]]; do
		((sec=(work-(SECONDS-start_time))))
		printf "\e[10;0H\e[1;35mWork left: %02d:%02d" "$((sec/60))" "$((sec%60))"
		bar $((SECONDS-start_time)) work
	done
	work_done
}
start_notwork() {
	((sec=1,start_time=$SECONDS))

	while [[ $sec > 0 ]]; do
		((sec=(notwork-(SECONDS-start_time))))
		printf "\e[10;0H\e[1;33mBreak left: %02d:%02d" "$((sec/60))" "$((sec%60))"
		bar $((SECONDS-start_time)) work
	done
	notwork_done
}
work_done() {
	play ~/.Scripts/.prokrastimer/gong.wav 2>/dev/null &

	((count++))
	[[ $count == $sess ]] && exit 0

	printf "\e[10;17H\e[1;39m - Work completed!"
	printf "\n\e[1;33mPress ENTER to start break"; read 2>/dev/null

	printf "\e[1A\r\e[J"
	start_notwork
}
notwork_done() {
	play ~/.Scripts/.prokrastimer/gong.wav 2>/dev/null &

	printf "\e[10;18H\e[1;39m - Break completed!"
	printf "\n\e[1;35mPress ENTER to start work"; read 2>/dev/null

	printf "\e[1A\r\e[J"
	start_work
}
completed() {
	[[ $((count*work/60)) > 0 ]] && hour="%2d hours and" || hour=""

	printf "\e[10;0H\e[J\e[1;33mWorked total:$hour%2d min."\
		"$((count*work/60))" "$(((count*work)%60))"
}
clean() { [[ ${FUNCNAME[1]} != prompt ]] && printf "\e[1J\e[H\e[1;36m$logo"; }
main() {
	printf "\e[2J"

	trap 'tput cvvis && completed && exit' EXIT
	trap 'clean' SIGWINCH

	logo=$(figlet -f big prokrastimer)
	count=0

	clean; prompt; stty -echo; tput civis; start_work
}
main
